# Credentials set in the secrets.yaml
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: $device_name
    password: !secret ap_password

# I use an unprotected mqtt broker ¯\_(ツ)_/¯
mqtt:
  broker: 192.168.1.150

substitutions:
  # Must set these
  device_name: "dimmer_prototype"
  mqtt_light_topic: "zigbee2mqtt/living_room_without_projector/set"

  # Play around with these
  default_brightness: "10" # range between 0 - 21 inclusive
  brightness_leds: "40%" # value too low can cause inconsistent color reproduction
  timeout_leds: "5s" # in seconds, time for only one led to show after a change
  dimming_interval: "0.25" # in seconds, lower than this value can overload the zigbee network

  # Best not touch these
  total_leds: "24"
  ring_leds: "21"
  auto_leds: "3"

esphome:
  name: $device_name
  platform: ESP8266
  board: esp12e
  on_boot:
    priority: -100
    then:
    # absolute hacks, otherwise LED ring won't work with addressable_set
    - script.execute: setRingOn 
    - delay: 3s
    - script.execute: setRingOff

captive_portal:
logger:
api:
ota:

globals:
  # Colors used in different states
  - id: colorManual
    type: int[3]
    initial_value: "{230, 204, 128}"
  - id: colorAuto
    type: int[3]
    initial_value: "{0, 0, 204}"
  - id: isAutomatic
    type: bool
    restore_value: yes
    initial_value: "false"

light:
  - platform: fastled_clockless
    chipset: WS2812
    pin: GPIO13
    num_leds: $total_leds
    rgb_order: GRB
    name: "Ring"
    id: ring
    internal: true
    
sensor:
  - platform: homeassistant
    name: "Auto brightness"
    id: autoBrightness
    entity_id: input_number.brightness
    internal: true
  - platform: homeassistant
    name: "Auto kelvin"
    id: autoKelvin
    entity_id: input_number.kelvin
    internal: true

  - platform: rotary_encoder
    internal: true
    id: rotary
    name: "Rotary Encoder"
    pin_a:
      number: GPIO14
      mode: INPUT_PULLUP
    pin_b:
      number: GPIO12
      mode: INPUT_PULLUP
    min_value: 0
    max_value: $ring_leds
    filters:
      - lambda: return x * (255 / $ring_leds);
      - heartbeat: $dimming_interval s
      - delta: 1 # This is used to prevent sending heartbeats when there are no changes
    on_value:
        - script.execute: setMQTTLights
        - script.execute: setAutomations
    on_raw_value:
        - globals.set:
            id: isAutomatic
            value: "false"
        - script.execute: setAuto
        - script.execute: setActiveRing
        - script.execute: setTimedOutRing

binary_sensor:
  - platform: gpio
    internal: true
    pin: GPIO5
    name: "Rotary switch"
    on_click:
    - min_length: 0ms
      max_length: 350ms
      then:
        - sensor.rotary_encoder.set_value:
            id: rotary
            value: !lambda "return ((id(rotary).state > 0) ? 0 : $default_brightness);"
    - min_length: 350ms
      max_length: 100000ms
      then:
        - sensor.rotary_encoder.set_value:
            id: rotary
            value: !lambda return id(autoBrightness).state / (255 / $ring_leds);

        - globals.set:
            id: isAutomatic
            value: "true"
        - script.execute: setAutomations
        - script.execute: setAuto
        - script.execute: setActiveRing

script:
  - id: setActiveRing
    then:
      - light.addressable_set:
          id: ring
          red: !lambda "return id(isAutomatic) ? id(colorAuto)[0] : id(colorManual)[0];"
          green: !lambda "return id(isAutomatic) ? id(colorAuto)[1] : id(colorManual)[1];"
          blue: !lambda "return id(isAutomatic) ? id(colorAuto)[2] : id(colorManual)[2];"
          range_from: 1
          range_to: !lambda return id(rotary).raw_state;
      - light.addressable_set:
          id: ring
          red: 0
          green: 0
          blue: 0
          range_to: $ring_leds
          range_from: !lambda return id(rotary).raw_state + 1;
  - id: setTimedOutRing
    then:
      - script.stop: setTimedOutRing
      - delay: $timeout_leds
      - script.execute: setRingOff
      - light.addressable_set:
          id: ring
          red: !lambda "return id(isAutomatic) ? id(colorAuto)[0] : id(colorManual)[0];"
          green: !lambda "return id(isAutomatic) ? id(colorAuto)[1] : id(colorManual)[1];"
          blue: !lambda "return id(isAutomatic) ? id(colorAuto)[2] : id(colorManual)[2];"
          range_from: !lambda "return id(rotary).raw_state == 0 ? 1 : id(rotary).raw_state;"
          range_to: !lambda return id(rotary).raw_state;
  - id: setAuto
    then:
      - light.addressable_set:
          id: ring
          red: !lambda "return id(isAutomatic) ? id(colorAuto)[0] : 0;"
          green: !lambda "return id(isAutomatic) ? id(colorAuto)[1] : 0;"
          blue: !lambda "return id(isAutomatic) ? id(colorAuto)[2] : 0;"
          range_from: 0
          range_to: 0
      - light.addressable_set:
          id: ring
          red: !lambda "return id(isAutomatic) ? id(colorAuto)[0] : 0;"
          green: !lambda "return id(isAutomatic) ? id(colorAuto)[1] : 0;"
          blue: !lambda "return id(isAutomatic) ? id(colorAuto)[2] : 0;"
          range_from: 22
          range_to: 24
  - id: setRingOff
    then:
      - light.addressable_set:
          id: ring
          red: 0
          green: 0
          blue: 0
          range_from: 0
          range_to: $total_leds
  - id: setRingOn
    then:
      - light.turn_on:
          id: ring
          red: 0
          green: 100%
          blue: 0
          brightness: $brightness_leds
  - id: setAutomations
    then:
      - homeassistant.service:
          service: !lambda "return id(isAutomatic) ? \"automation.turn_on\" : \"automation.turn_off\";"
          data: 
            entity_id: automation.entered_sitting_area
  - id: setMQTTLights
    then:
      - mqtt.publish_json:
          topic: !lambda return "$mqtt_light_topic";
          payload: |-
            root["brightness"] = id(rotary).state;
            root["transition"] = $dimming_interval;

