substitutions:
  # Best not touch these
  total_leds: "24"
  ring_leds: "21"
  auto_leds: "3"

light:
  - platform: fastled_clockless
    chipset: WS2812
    pin: GPIO13
    num_leds: $total_leds
    rgb_order: GRB
    name: "LED Ring"
    id: ring
    internal: true

script:
  # Scripts that handle the states of the LED ring during usage
  - id: active_ring_helper
    then:
    - light.addressable_set:
        id: ring
        red: !lambda "return id(color_active)[0];"
        green: !lambda "return id(color_active)[1];"
        blue: !lambda "return id(color_active)[2];"
        range_from: 1
        range_to: !lambda return id(ring_position);
    - light.addressable_set:
        id: ring
        red: 0
        green: 0
        blue: 0
        range_to: $ring_leds
        range_from: !lambda return id(ring_position) + 1;
  - id: set_active_ring
    mode: restart
    then:
      - while:
          condition:
            lambda: 'return id(rotary).raw_state != id(ring_position);'
          then:
          - script.execute: active_ring_helper
          - if:
              condition:
                lambda: 'return id(rotary).raw_state > id(ring_position);'
              then:    
                - globals.set:
                    id: ring_position
                    value: !lambda return id(ring_position) + 1;
          - if:
              condition:
                lambda: 'return id(rotary).raw_state < id(ring_position);'
              then:    
                - globals.set:
                    id: ring_position
                    value: !lambda return id(ring_position) - 1;               
          - delay: 20ms
          
      # Hack, we need it to run one more time after     
      - script.execute: active_ring_helper  

  - id: set_timed_out_ring
    mode: restart
    then:
      - delay: $timeout_leds
      - script.execute: set_ring_off
      - light.addressable_set:
          id: ring
          red: !lambda "return id(color_active)[0];"
          green: !lambda "return id(color_active)[1];"
          blue: !lambda "return id(color_active)[2];"
          range_from: !lambda "return id(rotary).raw_state == 0 ? 1 : id(rotary).raw_state;"
          range_to: !lambda return id(rotary).raw_state;

  - id: set_auto
    then:
      - light.addressable_set:
          id: ring
          red: !lambda "return id(is_automatic) ? id(color_automatic)[0] : 0;"
          green: !lambda "return id(is_automatic) ? id(color_automatic)[1] : 0;"
          blue: !lambda "return id(is_automatic) ? id(color_automatic)[2] : 0;"
          range_from: 0
          range_to: 0
      - light.addressable_set:
          id: ring
          red: !lambda "return id(is_automatic) ? id(color_automatic)[0] : 0;"
          green: !lambda "return id(is_automatic) ? id(color_automatic)[1] : 0;"
          blue: !lambda "return id(is_automatic) ? id(color_automatic)[2] : 0;"
          range_from: 22
          range_to: 24

  # Helpers for enabling and disabling the LED ring
  - id: set_ring_off
    then:
      - light.addressable_set:
          id: ring
          red: 0
          green: 0
          blue: 0
          range_from: 0
          range_to: $total_leds
  - id: set_ring_on
    then:
      - light.turn_on:
          id: ring
          red: 0
          green: 100%
          blue: 0
          brightness: $brightness_leds

